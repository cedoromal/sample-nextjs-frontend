/* tslint:disable */
/* eslint-disable */
/**
 * sample-dotnet-webapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    personId?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    lastName: string;
    /**
     * 
     * @type {Date}
     * @memberof Person
     */
    birthDate: Date;
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    income: number;
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    balance: number;
}

/**
 * Check if a given object implements the Person interface.
 */
export function instanceOfPerson(value: object): value is Person {
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('birthDate' in value) || value['birthDate'] === undefined) return false;
    if (!('income' in value) || value['income'] === undefined) return false;
    if (!('balance' in value) || value['balance'] === undefined) return false;
    return true;
}

export function PersonFromJSON(json: any): Person {
    return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
    if (json == null) {
        return json;
    }
    return {
        
        'personId': json['personId'] == null ? undefined : json['personId'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'birthDate': (new Date(json['birthDate'])),
        'income': json['income'],
        'balance': json['balance'],
    };
}

export function PersonToJSON(json: any): Person {
    return PersonToJSONTyped(json, false);
}

export function PersonToJSONTyped(value?: Person | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'personId': value['personId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'birthDate': ((value['birthDate']).toISOString().substring(0,10)),
        'income': value['income'],
        'balance': value['balance'],
    };
}

