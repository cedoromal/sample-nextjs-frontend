/* tslint:disable */
/* eslint-disable */
/**
 * sample-dotnet-webapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CsvUploadDetails,
  Person,
} from '../models/index';
import {
    CsvUploadDetailsFromJSON,
    CsvUploadDetailsToJSON,
    PersonFromJSON,
    PersonToJSON,
} from '../models/index';

export interface ApiPersonsCsvPostRequest {
    body?: string;
}

export interface ApiPersonsGetRequest {
    firstName?: string;
    lastName?: string;
    birthDateMin?: Date;
    birthDateMax?: Date;
    incomeMin?: number;
    incomeMax?: number;
    balanceMin?: number;
    balanceMax?: number;
}

export interface ApiPersonsIdDeleteRequest {
    id: string;
}

export interface ApiPersonsIdGetRequest {
    id: string;
}

export interface ApiPersonsIdPutRequest {
    id: string;
    person?: Person;
}

export interface ApiPersonsPostRequest {
    person?: Person;
}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI {

    /**
     */
    async apiPersonsCsvGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CsvUploadDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Persons/csv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CsvUploadDetailsFromJSON(jsonValue));
    }

    /**
     */
    async apiPersonsCsvGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CsvUploadDetails> {
        const response = await this.apiPersonsCsvGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPersonsCsvPostRaw(requestParameters: ApiPersonsCsvPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Persons/csv`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPersonsCsvPost(requestParameters: ApiPersonsCsvPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPersonsCsvPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPersonsGetRaw(requestParameters: ApiPersonsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Person>>> {
        const queryParameters: any = {};

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['birthDateMin'] != null) {
            queryParameters['birthDateMin'] = (requestParameters['birthDateMin'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['birthDateMax'] != null) {
            queryParameters['birthDateMax'] = (requestParameters['birthDateMax'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['incomeMin'] != null) {
            queryParameters['incomeMin'] = requestParameters['incomeMin'];
        }

        if (requestParameters['incomeMax'] != null) {
            queryParameters['incomeMax'] = requestParameters['incomeMax'];
        }

        if (requestParameters['balanceMin'] != null) {
            queryParameters['balanceMin'] = requestParameters['balanceMin'];
        }

        if (requestParameters['balanceMax'] != null) {
            queryParameters['balanceMax'] = requestParameters['balanceMax'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Persons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     */
    async apiPersonsGet(requestParameters: ApiPersonsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Person>> {
        const response = await this.apiPersonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPersonsIdDeleteRaw(requestParameters: ApiPersonsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPersonsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPersonsIdDelete(requestParameters: ApiPersonsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPersonsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPersonsIdGetRaw(requestParameters: ApiPersonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPersonsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     */
    async apiPersonsIdGet(requestParameters: ApiPersonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.apiPersonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPersonsIdPutRaw(requestParameters: ApiPersonsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPersonsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters['person']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPersonsIdPut(requestParameters: ApiPersonsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPersonsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiPersonsPostRaw(requestParameters: ApiPersonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Persons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters['person']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     */
    async apiPersonsPost(requestParameters: ApiPersonsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.apiPersonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
